version: '3.8'

services:
  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qbm-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://qbm_user:qbm_password@postgres:5432/qbm_db
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - qbm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: qbm-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - qbm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: qbm-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=qbm_db
      - POSTGRES_USER=qbm_user
      - POSTGRES_PASSWORD=qbm_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - qbm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qbm_user -d qbm_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: qbm-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - qbm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: qbm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - qbm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据预处理微服务
  data-preprocessing:
    build:
      context: ./microservices/data-preprocessing-service
      dockerfile: Dockerfile
    container_name: qbm-data-preprocessing
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://qbm_user:qbm_password@postgres:5432/qbm_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
    ports:
      - "8001:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - qbm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 模型训练微服务
  model-training:
    build:
      context: ./microservices/model-training-service
      dockerfile: Dockerfile
    container_name: qbm-model-training
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://qbm_user:qbm_password@postgres:5432/qbm_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
    ports:
      - "8002:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - qbm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 预测服务微服务
  prediction-service:
    build:
      context: ./microservices/prediction-service
      dockerfile: Dockerfile
    container_name: qbm-prediction-service
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://qbm_user:qbm_password@postgres:5432/qbm_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
    ports:
      - "8003:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - qbm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 优化服务微服务
  optimization-service:
    build:
      context: ./microservices/optimization-service
      dockerfile: Dockerfile
    container_name: qbm-optimization-service
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://qbm_user:qbm_password@postgres:5432/qbm_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
    ports:
      - "8004:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - qbm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务
  monitoring:
    image: prom/prometheus:latest
    container_name: qbm-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - qbm-network

  # 日志聚合
  loki:
    image: grafana/loki:latest
    container_name: qbm-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
    networks:
      - qbm-network

  # 可视化面板
  grafana:
    image: grafana/grafana:latest
    container_name: qbm-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - loki
      - monitoring
    networks:
      - qbm-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local

networks:
  qbm-network:
    driver: bridge

